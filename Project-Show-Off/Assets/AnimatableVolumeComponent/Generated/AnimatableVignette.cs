// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.HighDefinition.Vignette))]
    [DisallowMultipleComponent]
    public class AnimatableVignette : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.HighDefinition.Vignette);

        public bool override_mode;
        public UnityEngine.Rendering.HighDefinition.VignetteMode mode;
        public bool override_color;
        public UnityEngine.Color color;
        public bool override_center;
        public UnityEngine.Vector2 center;
        public bool override_intensity;
        public System.Single intensity;
        public bool override_smoothness;
        public System.Single smoothness;
        public bool override_roundness;
        public System.Single roundness;
        public bool override_rounded;
        public System.Boolean rounded;
        public bool override_mask;
        public UnityEngine.Texture mask;
        public bool override_opacity;
        public System.Single opacity;


        private void WriteToVolumeComponent(UnityEngine.Rendering.HighDefinition.Vignette volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.mode.overrideState = override_mode;
            volumeComponent.mode.value = mode;
            volumeComponent.color.overrideState = override_color;
            volumeComponent.color.value = color;
            volumeComponent.center.overrideState = override_center;
            volumeComponent.center.value = center;
            volumeComponent.intensity.overrideState = override_intensity;
            volumeComponent.intensity.value = intensity;
            volumeComponent.smoothness.overrideState = override_smoothness;
            volumeComponent.smoothness.value = smoothness;
            volumeComponent.roundness.overrideState = override_roundness;
            volumeComponent.roundness.value = roundness;
            volumeComponent.rounded.overrideState = override_rounded;
            volumeComponent.rounded.value = rounded;
            volumeComponent.mask.overrideState = override_mask;
            volumeComponent.mask.value = mask;
            volumeComponent.opacity.overrideState = override_opacity;
            volumeComponent.opacity.value = opacity;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.HighDefinition.Vignette volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_mode = volumeComponent.mode.overrideState;
            mode = volumeComponent.mode.value;
            override_color = volumeComponent.color.overrideState;
            color = volumeComponent.color.value;
            override_center = volumeComponent.center.overrideState;
            center = volumeComponent.center.value;
            override_intensity = volumeComponent.intensity.overrideState;
            intensity = volumeComponent.intensity.value;
            override_smoothness = volumeComponent.smoothness.overrideState;
            smoothness = volumeComponent.smoothness.value;
            override_roundness = volumeComponent.roundness.overrideState;
            roundness = volumeComponent.roundness.value;
            override_rounded = volumeComponent.rounded.overrideState;
            rounded = volumeComponent.rounded.value;
            override_mask = volumeComponent.mask.overrideState;
            mask = volumeComponent.mask.value;
            override_opacity = volumeComponent.opacity.overrideState;
            opacity = volumeComponent.opacity.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.HighDefinition.Vignette>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.HighDefinition.Vignette>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.HighDefinition.Vignette>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
